name: Release Tauri App

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., v1.0.0)"
        required: true
        type: string
      release_notes:
        description: "Release notes"
        required: false
        type: string
        default: "New release"
      prerelease:
        description: "Is this a pre-release?"
        required: false
        type: boolean
        default: false
  # Automatic trigger on tag push
  push:
    tags:
      - "v*.*.*"

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Check if release already exists for the tag
  check-release:
    runs-on: ubuntu-latest
    outputs:
      release-exists: ${{ steps.check.outputs.exists }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Check if release exists
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const response = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ steps.version.outputs.version }}'
              });
              core.setOutput('exists', 'true');
              console.log('Release already exists for tag:', '${{ steps.version.outputs.version }}');
            } catch (error) {
              if (error.status === 404) {
                core.setOutput('exists', 'false');
                console.log('No existing release found for tag:', '${{ steps.version.outputs.version }}');
              } else {
                throw error;
              }
            }

  # Create release if it doesn't exist
  create-release:
    needs: check-release
    if: needs.check-release.outputs.release-exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.check-release.outputs.version }}';
            let releaseNotes = '';

            if ('${{ github.event_name }}' === 'workflow_dispatch') {
              releaseNotes = `${{ github.event.inputs.release_notes }}`;
            } else {
              // Generate release notes from commits since last tag
              try {
                const { data: tags } = await github.rest.repos.listTags({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 2
                });
                
                if (tags.length > 1) {
                  const { data: comparison } = await github.rest.repos.compareCommits({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    base: tags[1].name,
                    head: tags[0].name
                  });
                  
                  releaseNotes = comparison.commits.map(commit => 
                    `- ${commit.commit.message.split('\n')[0]} (${commit.sha.substring(0, 7)})`
                  ).join('\n');
                } else {
                  releaseNotes = 'Initial release';
                }
              } catch (error) {
                console.log('Could not generate release notes:', error.message);
                releaseNotes = 'New release';
              }
            }

            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: `Release ${version}`,
              body: releaseNotes,
              draft: true,
              prerelease: ${{ github.event.inputs.prerelease || 'false' }}
            });

            core.setOutput('id', release.id);
            core.setOutput('upload_url', release.upload_url);
            console.log('Created release:', release.html_url);

  # Update version in files
  update-version:
    needs: [check-release, create-release]
    if: needs.check-release.outputs.release-exists == 'false' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Update package.json version
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          # Remove 'v' prefix if present
          VERSION_NUMBER=${VERSION#v}
          npm version $VERSION_NUMBER --no-git-tag-version

      - name: Update Cargo.toml version
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          VERSION_NUMBER=${VERSION#v}
          sed -i.bak "s/^version = \".*\"/version = \"$VERSION_NUMBER\"/" src-tauri/Cargo.toml
          rm src-tauri/Cargo.toml.bak

      - name: Update tauri.conf.json version
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          VERSION_NUMBER=${VERSION#v}
          sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION_NUMBER\"/" src-tauri/tauri.conf.json
          rm src-tauri/tauri.conf.json.bak

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json src-tauri/Cargo.toml src-tauri/tauri.conf.json
          git commit -m "chore: bump version to ${{ needs.check-release.outputs.version }}" || exit 0

      - name: Push changes
        run: git push origin HEAD:${{ github.ref_name }}

      - name: Create and push tag
        run: |
          git tag ${{ needs.check-release.outputs.version }}
          git push origin ${{ needs.check-release.outputs.version }}

  # Build for different platforms
  build-tauri:
    needs: [check-release, create-release]
    if: needs.check-release.outputs.release-exists == 'false'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            arch: "arm64"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            arch: "x64"
          - platform: "windows-latest"
            args: "--target x86_64-pc-windows-msvc"
            arch: "x64"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || 'x86_64-pc-windows-msvc' }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release-id }}
          args: ${{ matrix.args }}

  # Publish the release
  publish-release:
    needs: [check-release, create-release, build-tauri]
    if: needs.check-release.outputs.release-exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Publish release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release-id }},
              draft: false
            });
            console.log('Release published successfully!');

  # Notify on completion
  notify:
    needs: [check-release, create-release, build-tauri, publish-release]
    if: always() && needs.check-release.outputs.release-exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Get release info
        id: release-info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release-id }}
            });
            core.setOutput('url', release.html_url);
            core.setOutput('tag', release.tag_name);

      - name: Deployment status
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "üéâ Release ${{ steps.release-info.outputs.tag }} published successfully!"
            echo "üì¶ Download: ${{ steps.release-info.outputs.url }}"
          else
            echo "‚ùå Release failed. Check the workflow logs for details."
          fi
